// Generated by gencpp from file task1_q3/bot_pose.msg
// DO NOT EDIT!


#ifndef TASK1_Q3_MESSAGE_BOT_POSE_H
#define TASK1_Q3_MESSAGE_BOT_POSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace task1_q3
{
template <class ContainerAllocator>
struct bot_pose_
{
  typedef bot_pose_<ContainerAllocator> Type;

  bot_pose_()
    : x(0.0)
    , y(0.0)
    , direction()  {
    }
  bot_pose_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , direction(_alloc)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _direction_type;
  _direction_type direction;





  typedef boost::shared_ptr< ::task1_q3::bot_pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task1_q3::bot_pose_<ContainerAllocator> const> ConstPtr;

}; // struct bot_pose_

typedef ::task1_q3::bot_pose_<std::allocator<void> > bot_pose;

typedef boost::shared_ptr< ::task1_q3::bot_pose > bot_posePtr;
typedef boost::shared_ptr< ::task1_q3::bot_pose const> bot_poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task1_q3::bot_pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task1_q3::bot_pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::task1_q3::bot_pose_<ContainerAllocator1> & lhs, const ::task1_q3::bot_pose_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.direction == rhs.direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::task1_q3::bot_pose_<ContainerAllocator1> & lhs, const ::task1_q3::bot_pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace task1_q3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::task1_q3::bot_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task1_q3::bot_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task1_q3::bot_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task1_q3::bot_pose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task1_q3::bot_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task1_q3::bot_pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task1_q3::bot_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fe0bb04457256f44c3856c153b539c2";
  }

  static const char* value(const ::task1_q3::bot_pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fe0bb04457256f4ULL;
  static const uint64_t static_value2 = 0x4c3856c153b539c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::task1_q3::bot_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task1_q3/bot_pose";
  }

  static const char* value(const ::task1_q3::bot_pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task1_q3::bot_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"string direction\n"
;
  }

  static const char* value(const ::task1_q3::bot_pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task1_q3::bot_pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bot_pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task1_q3::bot_pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task1_q3::bot_pose_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK1_Q3_MESSAGE_BOT_POSE_H
